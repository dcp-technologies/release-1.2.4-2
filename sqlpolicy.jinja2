nameOverride: "{{ nameOverride }}"
fullnameOverride: "{{ fullnameOverride }}"
namespaceOverride: "{{ namespace }}"
architecture: {{ architecture }}
enablepasswd: {{ enablepasswd }}
runasuser: "{{runasuser}}"
clusterDomain: "{{ clusterDomain }}"
storageClassName: "{{ storageclassname }}"
replicaCount: {{ replicaCount }}
podManagementPolicy: "Parallel"
secretname: "{{secretname}}"
policyservicename: "{{policyservicename}}"

schedulerName: "{{ kubeschedulername }}"
priorityClassName: "{{priorityClassName}}"

diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

global:
  {%- if imagePullSecrets is defined and imagePullSecrets|length > 0 %}
  imagePullSecrets:
  {%- for secret in imagePullSecrets %}
    - {{ secret }}
  {%- endfor %}
  {%- else %}
  imagePullSecrets: []
  {%- endif %}

image:
  registry: "{{ registry }}"
  repository: "{{ repository}}"
  tag: "{{ tag }}"
  pullPolicy: "{{ pullpolicy }}"

{%- if commonLabels is defined and commonLabels|length > 0 %}
commonLabels:
{%- for commonLabel in commonLabels %}
  {{ commonLabel.name }}: {{ commonLabel.value }}
{%- endfor %}
{%- else %}
commonLabels: {}
{%- endif %}

{%- if commonAnnotations is defined and commonAnnotations|length > 0 %}
commonAnnotations:
{%- for commonAnnotation in commonAnnotations %}
  {{ commonAnnotation.name }}: {{ commonAnnotation.value }}
{%- endfor %}
{%- else %}
commonAnnotations: {}
{%- endif %}

{%- if podLabels is defined and podLabels|length > 0 %}
podLabels:
{%- for podLabel in podLabels %}
  {{ podLabel.name }}: {{ podLabel.value }}
{%- endfor %}
{%- else %}
podLabels: {}
{%- endif %}

{%- if podAnnotations is defined and podAnnotations|length > 0 %}
podAnnotations:
{%- for podAnnotation in podAnnotations %}
  {{ podAnnotation.name }}: {{ podAnnotation.value }}
{%- endfor %}
{%- else %}
podAnnotations: {}
{%- endif %}

{%- if hostAliases is defined and hostAliases|length > 0 %}
hostAliases:
{{ hostAliases|indent(2, True) }}
{%- else %}
hostAliases: []
{%- endif %}

{%- if dnsConfig is defined and dnsConfig|length > 0 %}
dnsConfig:
{{ dnsConfig|indent(2, True) }}
{%- else %}
dnsConfig: []
{%- endif %}

{%- if nodeSelector is defined and nodeSelector|length > 0 %}
nodeSelector:
{%- for item in nodeSelector %}
  {{ item.name }}: {{ item.value }}
{%- endfor %}
{%- else %}
nodeSelector: {}
{%- endif %}

tolerations: []

topologySpreadConstraints: []

{%- if topologyenabled %}
affinity:
  {%- if topologytype ==  "group" %}
  podAffinity:
  {%- else %}
  podAntiAffinity:
  {%- endif %}
  {%- if topologyrequired %}
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        {%- for label in podLabels %}
        - key: "{{ label.name }}"
          operator: In 
          values:
          - "{{ label.value }}"
        {%- endfor %}
      topologyKey: "{{toplogykey}}"
  {%- else %}
    preferredDuringSchedulingIgnoredDuringExecution: 
    - weight: 100  
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          {%- for label in podLabels %}
          - key: "{{ label.name }}"
            operator: In 
            values:
            - "{{ label.value }}"
          {%- endfor %}
        topologyKey: "{{toplogykey}}"
  {%- endif %}
{%- else %}
affinity: {} 
{%- endif %}

updateStrategy:
  type: RollingUpdate
  rollingUpdate: {}

containerSecurityContext:
  enabled: true
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: {{runasuser}}
  allowPrivilegeEscalation: false
  seccompProfile:
    type: RuntimeDefault
    #localhostProfile: 
  capabilities:
    drop: ["ALL"]    

podSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: {{runasuser}}
  fsGroup: {{runasuser}}

serviceAccount:
  enabled: true
  create: {{ specifyserviceaccount }}
  name: "{{ servicecaccount }}"
  {%- if podAnnotations is defined and podAnnotations|length > 0 %}
  annotations:
  {%- for podAnnotation in podAnnotations %}
    {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
  {%- endfor %}
  {%- else %}
  annotations: {}
  {%- endif %}
  automountServiceAccountToken: true  

service:
  type: ClusterIP
  ports:
    name: http
    http: {{port}}
    https: {{port}}

security:
  ssl:
    enabled: false
    autoGenerated: false
    image: "{{registry}}/{{repository}}:{{tag}}"
    keystorefilename: keystore.jks
    keystorePassword: {{keystorepassword}}
    truststorePassword: {{keystorepassword}}
    resources: 
      requests:
        cpu: 500m
        memory: 512Mi
      limits:
        cpu: 1
        memory: 1Gi


master:
  command: 
    - bash
    - -c
    - |
      mkdir -p /data/certs
      mkdir -p /data/tmp
      rm /data/certs/cacerts
      cp $JAVA_HOME/lib/security/cacerts /data/certs/cacerts
      chmod 777 /data/certs/cacerts
      keytool -import -noprompt -trustcacerts -alias mastersecret -file /certs/tls.crt -keystore /data/certs/cacerts -storepass changeit
      java \
        -Djava.io.tmpdir=/data/tmp \
        -Djavax.net.ssl.trustStore=/data/certs/cacerts -Djavax.net.ssl.trustStorePassword=changeit \
        -Dspring.config.location=/opt/dcp/conf/application.yaml -jar /opt/dcp/sqlpolicy.jar
  resources:
    requests:
      memory: {{ requestmem }}{{ unitrequestmem }}
      cpu: {{ requestcpu }}{% if unitrequestcpu == "m" %}m{% endif %}
    limits: 
      memory: {{ limitmem }}{{ unitlimitmem }}
      cpu: {{ limitcpu }}{% if unitlimitcpu == "m" %}m{% endif %}

  persistentVolumeClaimRetentionPolicy:
    enabled: true
    whenDeleted: Delete
    whenScaled: Retain
  persistence:
    enabled: {{enablestorage}}
    labels: {}
    annotations: {}
    size: {{datasize}}Gi
    accessModes : 
      - ReadWriteOnce
    selector: {}
    path: /data
    subPath: ""

db:  
  host: "{{dbhost}}"
  port: "{{portpgs}}"
  database: "{{dbname}}"
  name: "{{dbname}}"
  user: "{{dbuser}}"
  password: "{{dbpassword}}"
  rootuser: "{{dbrootuser}}"
  rootpassword: "{{dbrootpassword}}"
  connectionTimeout: 2000
  maximumPoolSize: 50








# For database
postgresql:
  enabled: true
  nameOverride: "{{nameOverride}}pgs"
  fullnameOverride: ""
  architecture: "{{ architecture }}"

  {%- if podLabels is defined and podLabels|length > 0 %}
  commonLabels:
  {%- for podLabel in podLabels %}
    {{ podLabel.name }}: {{ podLabel.value }}
  {%- endfor %}
  {%- else %}
  commonLabels: {}
  {%- endif %}

  {%- if commonAnnotations is defined and commonAnnotations|length > 0 %}
  commonAnnotations:
  {%- for commonAnnotation in commonAnnotations %}
    {{ commonAnnotation.name }}: {{ commonAnnotation.value }}
  {%- endfor %}
  {%- else %}
  commonAnnotations: {}
  {%- endif %}

  {%- if podAnnotations is defined and podAnnotations|length > 0 %}
  podAnnotations:
  {%- for podAnnotation in podAnnotations %}
      {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
  {%- endfor %}
  {%- else %}
  podAnnotations: {}
  {%- endif %}

  volumePermissions:
    enabled: false
    securityContext:
      runAsUser: "auto"

  shmVolume:
    chmod:
      enabled: false  
  
  image:
    registry: "{{ pgsregistry }}"
    repository: "{{ pgsrepository }}"
    tag: "{{ pgstag }}"
    digest: ""
    pullPolicy: "{{ pullpolicy }}"
    pullSecrets: []

  containerPorts:
    postgresql: {{portpgs}}

  global:
    {%- if imagePullSecrets is defined and imagePullSecrets|length > 0 %}
    imagePullSecrets:
    {%- for imagePullSecret in imagePullSecrets %}
      - {{ imagePullSecret }}
    {%- endfor %}
    {%- else %}
    imagePullSecrets: []
    {%- endif %}  
    storageClass: {{ storageclassname }}
    postgresql:
      auth:
        postgresPassword: "{{ dbrootpassword }}"
        username: "{{ dbuser }}"
        password: "{{ dbpassword }}"
        database: "{{ dbname }}"

  primary:
    schedulerName: "{{ kubeschedulername }}"

    podSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: {{ runasuser }}
      fsGroup: {{ runasuser }}

    containerSecurityContext:
      enabled: true
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: {{runasuser}}
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault
        #localhostProfile: 
      capabilities:
        drop: ["ALL"]

    {%- if topologyenabled %}
    affinity:
      {%- if topologytype ==  "group" %}
      podAffinity:
      {%- else %}
      podAntiAffinity:
      {%- endif %}
      {%- if topologyrequired %}
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            {%- for label in podLabels %}
            - key: "{{ label.name }}"
              operator: In 
              values:
              - "{{ label.value }}"
            {%- endfor %}
          topologyKey: "{{toplogykey}}"
      {%- else %}
        preferredDuringSchedulingIgnoredDuringExecution: 
        - weight: 100  
          podAffinityTerm:
            labelSelector:
              matchExpressions:
              {%- for label in podLabels %}
              - key: "{{ label.name }}"
                operator: In 
                values:
                - "{{ label.value }}"
              {%- endfor %}
            topologyKey: "{{toplogykey}}"
      {%- endif %}
    {%- else %}
    affinity: {} 
    {%- endif %}

    extraVolumeMounts:
      # if readonly filesystem
      - name: dcp-conf
        mountPath: /opt/bitnami
      - name: dcp-tmp
        mountPath: /tmp
      {%- if not dbpersist %}
      # If persistence is disabled
      #- name: dcp-data
      #  mountPath: /opt/dcp
      {%- endif %}
    extraVolumes:
      # if readonly filesystem
      - name: dcp-conf
        emptyDir: {}
      - name: dcp-tmp
        emptyDir: {}
      {%- if not dbpersist %}
      # If persistence is disabled
      #- name: dcp-data
      #  emptyDir: {}
      {%- endif %}

    command:
      - bash
      - -c
      - |
        cp -R /opt/dcp/postgresql /opt/bitnami
        cp -R /opt/dcp/licenses /opt/bitnami
        cp -R /opt/dcp/scripts /opt/bitnami
        cp -R /opt/dcp/common /opt/bitnami

        chmod 777 "/opt/bitnami/*"
        chmod -R 777 "/opt/bitnami/*"

        /opt/bitnami/scripts/postgresql/postunpack.sh
        /opt/bitnami/scripts/locales/add-extra-locales.sh

        export APP_VERSION="16.1.0"
        export BITNAMI_APP_NAME="postgresql"
        export LANG="en_US.UTF-8"
        export LANGUAGE="en_US:en"
        export NSS_WRAPPER_LIB="/opt/bitnami/common/lib/libnss_wrapper.so"
        export PATH="/opt/bitnami/postgresql/bin:$PATH"

        # if persistence is disabled
        {%- if not dbpersist %}
        mkdir /bitnami/postgresql/data
        {%- endif %}

        /opt/bitnami/scripts/postgresql/entrypoint.sh /opt/bitnami/scripts/postgresql/run.sh
    
    initdb:
      scripts:
        user: {{ dbrootuser }}
        password: {{ dbrootuser }}
        myinitdb.sql: |
          --
          -- PostgreSQL database
          --
          create database if not exists {{dbname}};
        tables.sql: |
          --
          -- PostgreSQL database dump
          --
          create database if not exists {{dbname}};

          create table if not exists dcp_trino_users (
            id SERIAL PRIMARY KEY,
            username VARCHAR NOT NULL,
            firstname VARCHAR NOT NULL,
            lastname VARCHAR NOT NULL,
            enabled boolean default true,
            isadmin boolean default false,
            servicename VARCHAR NOT null default '{{policyservicename}}',
            date_created timestamp default CURRENT_TIMESTAMP,
            date_updated timestamp default CURRENT_TIMESTAMP
          );

          create table if not exists dcp_trino_groups (
            id SERIAL PRIMARY KEY,
            name VARCHAR NOT NULL,
            description VARCHAR NOT NULL,
            enabled boolean default true,
            isadmin boolean default false,
            servicename VARCHAR NOT null default '{{policyservicename}}',
            date_created timestamp default CURRENT_TIMESTAMP,
            date_updated timestamp default CURRENT_TIMESTAMP
          );          

          create table if not exists dcp_trino_user_group (
            id SERIAL PRIMARY KEY,
            idgroup BIGINT not null,
            iduser BIGINT not null,
            username VARCHAR NOT NULL,
            date_created timestamp default CURRENT_TIMESTAMP,
            date_updated timestamp default CURRENT_TIMESTAMP
          );


          create table if not exists dcp_trino_policies (
            id SERIAL PRIMARY KEY,
            enabled boolean default true,
            name VARCHAR NOT NULL,
            description VARCHAR default '',
            servicename VARCHAR NOT null default '{{policyservicename}}',
            resourceatype varchar default '',
            resourceavalues text default '',
            resourcebtype varchar default '',
            resourcebvalues text default '',
            resourcectype varchar default '',
            resourcecvalues text default '',
            resourcedtype varchar default '',
            resourcedvalues text default '',
            resourcetype VARCHAR NOT NULL,
            isadmin boolean default false,
            date_created timestamp default CURRENT_TIMESTAMP,
            date_updated timestamp default CURRENT_TIMESTAMP
          );

          create table if not exists dcp_trino_policies_detail (
            id SERIAL PRIMARY KEY,
            enabled boolean default true,
            name VARCHAR NOT NULL,
            servicename VARCHAR NOT null default '{{policyservicename}}',
            refcatalog VARCHAR default '',
            refschema VARCHAR default '',
            reftable VARCHAR default '',
            refcolumn text default '',
            resourcename VARCHAR NOT NULL,
            resourcetype VARCHAR NOT NULL,
            date_created timestamp default CURRENT_TIMESTAMP,
            date_updated timestamp default CURRENT_TIMESTAMP
          );

          create table if not exists dcp_trino_policies_usergroup (
            id SERIAL PRIMARY KEY,
            policyname VARCHAR not null,
            username varchar,
            groupname varchar,
            date_created timestamp default CURRENT_TIMESTAMP,
            date_updated timestamp default CURRENT_TIMESTAMP
          );

          create table if not exists dcp_trino_policies_roles (
            id SERIAL PRIMARY KEY,
            policyname VARCHAR not null,
            role varchar,
            date_created timestamp default CURRENT_TIMESTAMP,
            date_updated timestamp default CURRENT_TIMESTAMP
          );

          create table if not exists dcp_trino_policies_audit (
            id SERIAL PRIMARY KEY,
            servicename VARCHAR NOT null default '{{policyservicename}}',	
            trinoservice VARCHAR NOT null default '',
            refcatalog VARCHAR NOT null default '',
            refschema VARCHAR NOT null default '',
            reftable VARCHAR NOT null default '',
            refcolumn VARCHAR NOT null default '',
            resourcetype varchar NOT null default '',
            resourcevalues text NOT null default '',
            accesstype varchar NOT null default '',
            authorized boolean default true,
            groupname varchar NOT null default '',
            username varchar NOT null default '',
            date_created timestamp default CURRENT_TIMESTAMP,
            date_updated timestamp default CURRENT_TIMESTAMP
          );


          CREATE INDEX if not exists dcp_trino_users_username ON dcp_trino_users (username);
          CREATE INDEX if not exists dcp_trino_users_username_admin ON dcp_trino_users (username, isadmin);
          
          CREATE INDEX if not exists dcp_trino_groups_name ON dcp_trino_groups (name);
          CREATE INDEX if not exists dcp_trino_groups_name_admin ON dcp_trino_groups (name, isadmin);
          
          CREATE INDEX if not exists dcp_trino_policies_name ON dcp_trino_policies (name);
          CREATE INDEX if not exists dcp_trino_policies_name_admin ON dcp_trino_policies (name, isadmin);
          
          CREATE INDEX if not exists dcp_trino_policies_usergroup_groupname ON dcp_trino_policies_usergroup (groupname);


          DO $$
          DECLARE
              idgroup INT;
              iduser INT;
          BEGIN
              INSERT INTO dcp_trino_groups ("name",description,enabled,servicename,isadmin) VALUES ('dcp-admin','dcp-admin',true,'{{policyservicename}}',true)  RETURNING id INTO idgroup;
              INSERT INTO dcp_trino_users (username,firstname,lastname,enabled,servicename,isadmin) VALUES ('test','test','test',true,'{{policyservicename}}',true)  RETURNING id INTO iduser;
              INSERT INTO dcp_trino_user_group (idgroup,iduser,username) VALUES (idgroup,iduser,'test');

              INSERT INTO dcp_trino_users (username,firstname,lastname,enabled,servicename,isadmin) VALUES	 ('dcpadmin','dcpadmin','dcpadmin',true,'{{policyservicename}}',true)  RETURNING id INTO iduser;
              INSERT INTO dcp_trino_user_group (idgroup,iduser,username) VALUES (idgroup,iduser,'dcpadmin');
          END $$;

          INSERT INTO dcp_trino_policies (enabled,"name",description,servicename,resourceatype,resourceavalues,resourcebtype,resourcebvalues,resourcectype,resourcecvalues,resourcedtype,resourcedvalues,resourcetype,isadmin) VALUES
            (true,'dcp-admin-catalog','dcp-admin-catalog','{{policyservicename}}','catalog','[*]','none','[]','none','[]','none','[]','catalog',true),
            (true,'dcp-admin-schema','dcp-admin-schema','{{policyservicename}}','catalog','[*]','schema','[*]','none','[]','none','[]','schema',true),
            (true,'dcp-admin-table','dcp-admin-table','{{policyservicename}}','catalog','[*]','schema','[*]','table','[*]','none','[]','table',true),
            (true,'dcp-admin-column','dcp-admin-column','{{policyservicename}}','catalog','[*]','schema','[*]','table','[*]','column','[*]','column',true);

          INSERT INTO dcp_trino_policies_detail (enabled,"name",servicename,refcatalog,refschema,reftable,refcolumn,resourcename,resourcetype) VALUES
            (true,'dcp-admin-catalog','{{policyservicename}}','*','','','','*','catalog'),
            (true,'dcp-admin-table','{{policyservicename}}','*','*','*','','*','table'),
            (true,'dcp-admin-schema','{{policyservicename}}','*','*','','','*','schema'),
            (true,'dcp-admin-column','{{policyservicename}}','*','*','*','*','*','column');


          INSERT INTO dcp_trino_policies_roles (policyname,"role") VALUES
            ('dcp-admin-catalog','select'),
            ('dcp-admin-catalog','insert'),
            ('dcp-admin-catalog','create'),
            ('dcp-admin-catalog','drop'),
            ('dcp-admin-catalog','delete'),
            ('dcp-admin-catalog','use'),
            ('dcp-admin-catalog','alter'),
            ('dcp-admin-catalog','grant'),
            ('dcp-admin-catalog','revoke'),
            ('dcp-admin-catalog','show');

          INSERT INTO dcp_trino_policies_roles (policyname,"role") VALUES
            ('dcp-admin-catalog','impersonate'),
            ('dcp-admin-catalog','execute'),
            ('dcp-admin-catalog','all'),
            ('dcp-admin-schema','select'),
            ('dcp-admin-schema','insert'),
            ('dcp-admin-schema','create'),
            ('dcp-admin-schema','drop'),
            ('dcp-admin-schema','delete'),
            ('dcp-admin-schema','use'),
            ('dcp-admin-schema','alter');

          INSERT INTO dcp_trino_policies_roles (policyname,"role") VALUES
            ('dcp-admin-schema','grant'),
            ('dcp-admin-schema','revoke'),
            ('dcp-admin-schema','show'),
            ('dcp-admin-schema','impersonate'),
            ('dcp-admin-schema','all'),
            ('dcp-admin-schema','execute'),
            ('dcp-admin-table','select'),
            ('dcp-admin-table','insert'),
            ('dcp-admin-table','create'),
            ('dcp-admin-table','drop');

          INSERT INTO dcp_trino_policies_roles (policyname,"role") VALUES
            ('dcp-admin-table','delete'),
            ('dcp-admin-table','use'),
            ('dcp-admin-table','alter'),
            ('dcp-admin-table','grant'),
            ('dcp-admin-table','revoke'),
            ('dcp-admin-table','show'),
            ('dcp-admin-table','impersonate'),
            ('dcp-admin-table','all'),
            ('dcp-admin-table','execute'),
            ('dcp-admin-column','select');

          INSERT INTO dcp_trino_policies_roles (policyname,"role") VALUES
            ('dcp-admin-column','insert'),
            ('dcp-admin-column','create'),
            ('dcp-admin-column','drop'),
            ('dcp-admin-column','delete'),
            ('dcp-admin-column','use'),
            ('dcp-admin-column','alter'),
            ('dcp-admin-column','grant'),
            ('dcp-admin-column','revoke'),
            ('dcp-admin-column','show'),
            ('dcp-admin-column','impersonate');

          INSERT INTO dcp_trino_policies_roles (policyname,"role") VALUES
            ('dcp-admin-column','all'),
            ('dcp-admin-column','execute');

          INSERT INTO dcp_trino_policies_usergroup (policyname,username,groupname) VALUES
            ('dcp-admin-catalog',NULL,'dcp-admin'),
            ('dcp-admin-schema',NULL,'dcp-admin'),
            ('dcp-admin-table',NULL,'dcp-admin'),
            ('dcp-admin-column',NULL,'dcp-admin');

    persistence:
      enabled: {{ dbpersist }}
      storageClass: {{ storageClassName }}
      size: {{ dbsize }}Gi
      labels: 
        {%- if podLabels is defined and podLabels|length > 0 %}
        {%- for podLabel in podLabels %}
        {{ podLabel.name }}: "{{ podLabel.value }}"
        {%- endfor %}
        {%- else %}
        release: {{ nameOverride }}
        {%- endif %}
    resources:
      limits: 
        memory: {{ limitmempgs }}{{unitlimitmempgs}}
        cpu: {{ limitcpupgs }}{% if unitlimitcpupgs == "m" %}m{% endif %}
      requests:
        memory: {{ requestmempgs }}{{unitrequestmempgs}}
        cpu: {{ requestcpupgs }}{% if unitrequestcpupgs == "m" %}m{% endif %}

  readReplicas:
    name: read
    replicaCount: {{ readreplicas }}
    schedulerName: "{{ kubeschedulername }}"
    podSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: {{ runasuser }}
      fsGroup: {{ runasuser }}

    containerSecurityContext:
      enabled: true
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: {{runasuser}}
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault
        #localhostProfile: 
      capabilities:
        drop: ["ALL"]

    {%- if topologyenabled %}
    affinity:
      {%- if topologytype ==  "group" %}
      podAffinity:
      {%- else %}
      podAntiAffinity:
      {%- endif %}
      {%- if topologyrequired %}
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            {%- for label in podLabels %}
            - key: "{{ label.name }}"
              operator: In 
              values:
              - "{{ label.value }}"
            {%- endfor %}
          topologyKey: "{{toplogykey}}"
      {%- else %}
        preferredDuringSchedulingIgnoredDuringExecution: 
        - weight: 100  
          podAffinityTerm:
            labelSelector:
              matchExpressions:
              {%- for label in podLabels %}
              - key: "{{ label.name }}"
                operator: In 
                values:
                - "{{ label.value }}"
              {%- endfor %}
            topologyKey: "{{toplogykey}}"
      {%- endif %}
    {%- else %}
    affinity: {} 
    {%- endif %}

    extraVolumeMounts:
      # if readonly filesystem
      - name: dcp-conf
        mountPath: /opt/bitnami
      - name: dcp-tmp
        mountPath: /tmp
      {%- if not dbpersist %}
      # If persistence is disabled
      #- name: dcp-data
      #  mountPath: /opt/dcp
      {%- endif %}
    extraVolumes:
      # if readonly filesystem
      - name: dcp-conf
        emptyDir: {}
      - name: dcp-tmp
        emptyDir: {}
      {%- if not dbpersist %}
      # If persistence is disabled
      #- name: dcp-data
      #  emptyDir: {}
      {%- endif %}

    command:
      - bash
      - -c
      - |
        cp -R /opt/dcp/postgresql /opt/bitnami
        cp -R /opt/dcp/licenses /opt/bitnami
        cp -R /opt/dcp/scripts /opt/bitnami
        cp -R /opt/dcp/common /opt/bitnami

        chmod 777 "/opt/bitnami/*"
        chmod -R 777 "/opt/bitnami/*"

        /opt/bitnami/scripts/postgresql/postunpack.sh
        /opt/bitnami/scripts/locales/add-extra-locales.sh

        export APP_VERSION="16.1.0"
        export BITNAMI_APP_NAME="postgresql"
        export LANG="en_US.UTF-8"
        export LANGUAGE="en_US:en"
        export NSS_WRAPPER_LIB="/opt/bitnami/common/lib/libnss_wrapper.so"
        export PATH="/opt/bitnami/postgresql/bin:$PATH"

        # if persistence is disabled
        {%- if not dbpersist %}
        mkdir /bitnami/postgresql/data
        {%- endif %}

        /opt/bitnami/scripts/postgresql/entrypoint.sh /opt/bitnami/scripts/postgresql/run.sh

    persistence:
      enabled: {{ dbpersist }}
      storageClass: {{ storageClassName }}
      size: {{ dbsize }}Gi
      labels: 
        {%- if podLabels is defined and podLabels|length > 0 %}
        {%- for podLabel in podLabels %}
        {{ podLabel.name }}: "{{ podLabel.value }}"
        {%- endfor %}
        {%- else %}
        release: {{ nameOverride }}
        {%- endif %}
    resources:
      limits: 
        memory: {{ limitmempgs }}{{unitlimitmempgs}}
        cpu: {{ limitcpupgs }}{% if unitlimitcpupgs == "m" %}m{% endif %}
      requests:
        memory: {{ requestmempgs }}{{unitrequestmempgs}}
        cpu: {{ requestcpupgs }}{% if unitrequestcpupgs == "m" %}m{% endif %}


ca:
  crt: {{ cacrt }}
  key: {{ cakey }}
tls:
  crt: {{ tlscrt }}
  key: {{ tlskey }}

certificate: |-
{{ certificate|indent(4, True) }}
key: |-
{{ key|indent(4, True) }}        